package main

import (
	"fmt"
	"log"
	"math/rand"
)

//func main() {
//	var p Publisher
//	p = newPublisher()
//	p.broadcast("hello")
//
//	s := newSubcriber("123")
//	s2 := newSubcriber("456")
//	p.addSubcriber(s)
//	p.addSubcriber(s2)
//	p.broadcast("hello again")
//
//	p.removeSubcriber(s.id())
//	p.broadcast("good day")
//
//	a := newAutogeneratedIdSubscriber()
//	p.addSubcriber(a)
//	p.broadcast("bye")
//}

type Publisher interface {
	addSubcriber(subcriber Subcriber)
	removeSubcriber(subId string)
	broadcast(msg string)
}
type Subcriber interface {
	id() string
	react(msg string)
}

type publisher struct {
	subcribers map[string]Subcriber
}

func (p publisher) addSubcriber(subcriber Subcriber) {
	p.subcribers[subcriber.id()] = subcriber
}

func (p publisher) removeSubcriber(subId string) {
	delete(p.subcribers, subId)
}

func (p publisher) broadcast(msg string) {
	for _, subcriber := range p.subcribers {
		subcriber.react(msg)
	}
}

func newPublisher() publisher {
	return publisher{subcribers: make(map[string]Subcriber)}
}

type subsciber struct {
	subId string
}

func newSubcriber(subId string) subsciber {
	return subsciber{subId: subId}
}
func (s subsciber) id() string {
	return s.subId
}

func (s subsciber) react(msg string) {
	log.Printf("ID %s - received: %s", s.subId, msg)
}

type autogeneratedIdSubscriber struct {
	subId string
}

func newAutogeneratedIdSubscriber() *autogeneratedIdSubscriber {
	return &autogeneratedIdSubscriber{subId: fmt.Sprint(rand.Int())}
}

func (a autogeneratedIdSubscriber) id() string {
	return a.subId
}

func (a autogeneratedIdSubscriber) react(msg string) {
	log.Printf("ID %s -  autogeneratedId sub received: %s", a.subId, msg)
}
